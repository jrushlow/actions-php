name: wtf
on: [push, pull_request]
jobs:
  build:
    name: wtf
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        php-versions: ['7.2', '7.3', '7.4']

    steps:
      - name: Checkout
        uses: actions/checkout@v2.0.0

      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"
      - uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}

      - name: Composer
        if: steps.composer-cache.outputs.cache-hit != 'true'
        run: composer install

      - name: ls vendor
        run: ls -lah $GITHUB_WORKSPACE/vendor


#      - name: Set PHP versions
#        # run: which php
#        run: sudo update-alternatives --set php /usr/bin/php${{ matrix.php-versions }}
      
      # - name: Cat Xdebug ini
      #   run: cat /etc/php/7.4/cli/conf.d/20-xdebug.ini
      
      # - name: Disable Xdebug
      #   run: sudo rm /etc/php/${{ matrix.php-versions }}/cli/conf.d/20-xdebug.ini
      
      # - name: Show php config
      #   run: php -i

      # - name: Cat PHP ini
      #   run: cat /etc/php/${{ matrix.php-versions }}/cli/php.ini
      
      # - name: wtf
      #   run: php -v
      # # echo "::set-output name=version::$ver"
      #
#      - name: test
#        run: |
#          ver=$(php -v | grep -oP '(?<=PHP )\d.\d')
#          echo "::set-output name=version::$ver"
#        id: php-ver
#
#      - name: t
#        run: echo ${{ steps.php-ver.outputs.version }}
#
#      - name: Using PHP Version from matrix
#        run: |
#          echo "Runner is not using PHP Version defined in the php-versions matrix."
#          php -v
#          exit 1
#        if: steps.php-ver.outputs.version != matrix.php-versions
